// File: backend/campaign_dao.go

package main

import (
	"database/sql"
	"time"

	"codex-arcana/backend/models"
)

// CreateCampaing insert a new registry into the campaigns table and returns the created object
func CreateCampaign(c models.Campaign) (models.Campaign, error) {
	// Timestamp definition
	now := time.Now()
	c.CreatedAt = now
	c.UpdatedAt = now

	// Execute INSERT and get last inserted ID
	result, err := DB.Exec(
		`INSERT INTO campaigns (name, description, created_at, updated_at)
		VALUES (?, ?, ?, ?)`,
		c.Name,
		c.Description,
		c.CreatedAt,
		c.UpdatedAt,
	)
	if err != nil {
		return models.Campaign{}, err
	}

	// Get ID generated by the database
	id, err := result.LastInsertId()
	if err != nil {
		return models.Campaign{}, err
	}
	c.ID = int(id)

	// Return the created campaign
	return c, nil
}

// GetAllCampaigns returns all campaigns from the database
func GetAllCampaigns() ([]models.Campaign, error) {
	// Prepare slice to hold campaigns
	var campaigns []models.Campaign

	// Execute SELECT query
	rows, err := DB.Query(
		`SELECT id, name, description, created_at, updated_at FROM campaigns`,
	)
	if err != nil {
		return nil, err
	}

	defer rows.Close()

	// Iterate over returned rows
	for rows.Next() {
		var c models.Campaign
		if err := rows.Scan(&c.ID, &c.Name, &c.Description, &c.CreatedAt, &c.UpdatedAt); err != nil {
			return nil, err
		}
		campaigns = append(campaigns, c)
	}

	// Check for errors after iterating
	if err := rows.Err(); err != nil {
		return nil, err
	}

	// Return the list of campaigns
	return campaigns, nil
}

// GetCampaignByID returns a specific campaign by its ID
func GetCampaignByID(id int) (models.Campaign, error) {
	var c models.Campaign

	// Execute SELECT query to find the campaign by ID
	row := DB.QueryRow(
		`SELECT id, name, description, created_at, updated_at FROM campaigns WHERE id = ?`,
		id,
	)

	// Scan the result into the campaign struct
	if err := row.Scan(&c.ID, &c.Name, &c.Description, &c.CreatedAt, &c.UpdatedAt); err != nil {
		if err == sql.ErrNoRows {
			return models.Campaign{}, err // Caller might handle this as "not found"
		}
		return models.Campaign{}, err // Return any other error
	}

	// Return the found campaign
	return c, nil
}

// UpdateCampaign updates name, description, and `updated_at` timestamp of an existing campaign
func UpdateCampaign(c models.Campaign) error {
	// Update timestamp
	c.UpdatedAt = time.Now()

	// Execute UPDATE query
	_, err := DB.Exec(
		`UPDATE campaigns SET name = ?, description = ?, updated_at = ? WHERE id = ?`,
		c.Name,
		c.Description,
		c.UpdatedAt,
		c.ID,
	)

	return err
}

// DeleteCampaign deletes a campaign by its ID
func DeleteCampaign(id int) error {
	// Execute DELETE query
	_, err := DB.Exec(
		`DELETE FROM campaigns WHERE id = ?`,
		id,
	)

	return err
}
